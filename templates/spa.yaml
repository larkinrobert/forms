
---
AWSTemplateFormatVersion: '2010-09-09'
Description: SPA Atom

Parameters:
  awsAccountId:
    Type: String
    Default: "014066636401"
  cloudformationsBucket:
    Type: String
    Default: deploy-forms-014066636401/microservice_template
  deploymentStage:
    Type: String
    Default: dev

Resources:

  role:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/deploy-forms-larkin", "/forms/resources/role.yaml"]]
      TimeoutInMinutes: 2
      Parameters:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: !Join ["", ["s3://",!Ref cloudformationsBucket, "/microservice-template/awsoptions/role.yaml"]]

  loggroup:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/deploy-forms-larkin", "/forms/resources/loggroup.yaml"]]
      TimeoutInMinutes: 2

  dynamodb:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/deploy-forms-larkin", "/forms/resources/dynamodb.yaml"]]
      TimeoutInMinutes: 2
      Parameters:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: !Join ["", ["s3://",!Ref cloudformationsBucket, "/microservice-template/awsoptions/dynamodb.yaml"]]

  sqs:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/deploy-forms-larkin", "/forms/resources/sqs.yaml"]]
      TimeoutInMinutes: 2

  sns:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
      - sqs
      - role
      - lambdaPermissionS3
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/deploy-forms-larkin", "/forms/resources/sns.yaml"]]
      TimeoutInMinutes: 2
      Parameters:
        sqsArn:
          Fn::GetAtt: [sqs, Outputs.sqsArn]
        lambdaArn:
          Fn::GetAtt: [lambda, Outputs.lambdaArn]
        lambdaName:
          Fn::GetAtt: [lambda, Outputs.lambdaName]
#This is where templating is needed to do correctly:
  # for s3 in ['deploy, assets, upload']
  s3Deploy:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
      - sns
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/deploy-forms-larkin", "/forms/resources/s3.yaml"]]
      TimeoutInMinutes: 2
      Parameters:
        snsArn:
          Fn::GetAtt: [sns, Outputs.snsArn]

  s3Upload:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
      - sns
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/deploy-forms-larkin", "/forms/resources/s3.yaml"]]
      TimeoutInMinutes: 2
      Parameters:
        snsArn:
          Fn::GetAtt: [sns, Outputs.snsArn]

  codebuild:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
      - s3Deploy
      - role
      - loggroup
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/deploy-forms-larkin", "/forms/resources/codebuild.yaml"]]
      TimeoutInMinutes: 2
      Parameters:
        s3Deploy:
          Fn::GetAtt: [s3Deploy, Outputs.s3Name]
        roleArn:
          Fn::GetAtt: [role, Outputs.roleArn]
        stackName: !Ref "AWS::StackName"
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: !Join ["", ["s3://",!Ref cloudformationsBucket, "/microservice-template/awsoptions/codebuild.yaml"]]

  lambda:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
      - role
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/deploy-forms-larkin", "/forms/resources/lambda.yaml"]]
      TimeoutInMinutes: 2
      Parameters:
        roleArn:
          Fn::GetAtt: [role, Outputs.roleArn]
      # Properties in these transform files could be read in from an external .yaml file that is
      # managed by the developer.. but since we are not using a programtic/templated
      # design, that will not be possible. Reading these transforms in from a shared s3 bucket
      # (like they are now) defeats the reason for having them. -sh
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: !Join ["", ["s3://",!Ref cloudformationsBucket, "/microservice-template/awsoptions/lambda.yaml"]]

  lambdaPermissionS3:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
      - lambda
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/deploy-forms-larkin", "/forms/resources/lambdapermissionS3.yaml"]]
      TimeoutInMinutes: 2
      Parameters:
        lambdaArn:
          Fn::GetAtt: [lambda, Outputs.lambdaArn]

  lambdaPermissionApi:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
      - lambda
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/deploy-forms-larkin", "/forms/resources/lambdapermissionApi.yaml"]]
      TimeoutInMinutes: 2
      Parameters:
        lambdaArn:
          Fn::GetAtt: [lambda, Outputs.lambdaArn]
  api:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
      - lambdaPermissionApi
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/deploy-forms-larkin", "/forms/resources/api.yaml"]]
      TimeoutInMinutes: 2
      Parameters:
        lambdaArn:
          Fn::GetAtt: [lambda, Outputs.lambdaArn]
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: !Join ["", ["s3://",!Ref cloudformationsBucket, "/microservice-template/awsoptions/api.yaml"]]
Outputs:
  s3DeployName:
    Value:
      Fn::GetAtt: [s3Deploy, Outputs.s3Name]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-s3DeployName
  s3AssetsName:
    Value:
      Fn::GetAtt: [s3Assets, Outputs.s3Name]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-s3AssetsName
  s3UploadName:
    Value:
      Fn::GetAtt: [s3Upload, Outputs.s3Name]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-s3UploadName
  logGroupName:
    Value:
      Fn::GetAtt: [loggroup, Outputs.logGroupName]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-logGroupName
  roleName:
    Value:
      Fn::GetAtt: [role, Outputs.roleName]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-roleName
  roleArn:
    Value:
      Fn::GetAtt: [role, Outputs.roleArn]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-roleArn
  lambdaArn:
    Value:
      Fn::GetAtt: [lambda, Outputs.lambdaArn]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-lambdaArn
  lambdaName:
    Value:
      Fn::GetAtt: [lambda, Outputs.lambdaName]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-lambdaName
  apiName:
    Value:
      Fn::GetAtt: [api, Outputs.apiName]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-apiName
  sqsName:
    Value:
      Fn::GetAtt: [sqs, Outputs.sqsName]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-sqsName
  snsName:
    Value:
      Fn::GetAtt: [sns, Outputs.snsName]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-snsName
  snsArn:
    Value:
      Fn::GetAtt: [sns, Outputs.snsArn]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-snsArn
  dynamodbName:
    Value:
      Fn::GetAtt: [dynamodb, Outputs.dynamodbName]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-dynamodbName
  codeBuild:
    Value:
      Fn::GetAtt: [codebuild, Outputs.codeBuildName]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-codeBuild
  codeBuildArn:
    Value:
      Fn::GetAtt: [codebuild, Outputs.codeBuildArn]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-codeBuildArn
  gitHubProjectName:
    Value:
      Fn::GetAtt: [codebuild, Outputs.gitHubProjectName]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-gitHubProjectName
  gitHubRepoUrl:
    Value:
      Fn::GetAtt: [codebuild, Outputs.gitHubRepoUrl]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-gitHubRepoUrl
  gitHubRepoName:
    Value:
      Fn::GetAtt: [codebuild, Outputs.gitHubRepoName]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-gitHubRepoName
  artifactFileName:
    Value:
      Fn::GetAtt: [codebuild, Outputs.artifactFileName]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-artifactFileName